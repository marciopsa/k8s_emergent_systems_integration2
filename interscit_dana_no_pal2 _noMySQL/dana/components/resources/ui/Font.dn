/*
{ "description" : "This is an API that allows the creation of font instances for use with other graphical objects. Note that Dana comes with standard fonts within the resources-ext directory so that the programmer can rely on at least these fonts always being available. See also the SystemInfo API which reports on the default system fonts." }
*/

uses Bitmap

interface Font{
	/*
	{ "@description" : "Creates a new font instance, from a given font file, using a given font size." }
	*/
	Font(char path[], int size)
	
	/*
	{ "@description" : "Get the FontMetrics of this font." }
	*/
	FontMetrics getFontMetrics()
	
	/*
	{ "@description" : "Get the friendly name of this font." }
	*/
	char[] getFontName()
	
	/*
	{ "@description" : "Get the character spacing affinity of the font (fixed width or variable-width)." }
	*/
	bool isFixedCharacterWidth()
	
	/*
	{ "@description" : "Get the width, in pixels, of the given text as rendered by this font." }
	*/
	int getTextWidth(char text[])
	
	/*
	{ "@description" : "Get a piece of text, rendered with this font on a single line, as a bitmap." }
	*/
	Bitmap getBitmap(char text[], Color textColor)
	}

/*
{ "description" : "Description of a font's details." }
*/
data FontMetrics{
	/*
	{ "@description" : "The total height of the font in pixels (this is the maximum height of the tallest glyph in the entire typeface)." }
	*/
	int height
	/*
	{ "@description" : "Of the height, how much is "ascent" above the "baseline" (which is an imaginary 1 pixel line)." }
	*/
	int ascent
	/*
	{ "@description" : "Of the height, how much is "descent" below the "baseline" (which is an imaginary 1 pixel line)." }
	*/
	int descent
	/*
	{ "@description" : "The recommended number of pixels between lines (this is an optional typeface attribute which might be 0)." }
	*/
	int lineskip
	}