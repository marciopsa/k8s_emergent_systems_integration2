data GraphicsItem{
	GraphicsObject object
	GraphicsItem next
	GraphicsItem prev
	}

component provides GraphicsListView(AdaptEvents) requires Panel, io.Output out, data.IntUtil iu{
	
	GraphicsItem objects
	GraphicsItem lastObject
	
	GraphicsListView:GraphicsListView()
		{
		super()
		}
	
	void GraphicsListView:paint(Canvas c)
		{
		//background
		int xpos = getPosition().x
		int ypos = getPosition().y
		
		int w = getSize().width
		int h = getSize().height
		
		//paint each object in turn
		// - for each one we get its preferred size as a basis on which to position the next objects...
		int cx = 10
		int cy = 10
		int largestRowHeight = 0
		for (GraphicsItem li = objects; li != null; li = li.next)
			{
			if (li.object != null)
				{
				WH prefsz = li.object.getPreferredSize()
				
				if (cx + prefsz.width > xpos + w)
					{
					cy += largestRowHeight + 10
					cx = 10
					largestRowHeight = prefsz.height
					}
				
				li.object.setPosition(cx, cy)
				if (prefsz.height > largestRowHeight) largestRowHeight = prefsz.height
				
				cx += prefsz.width + 10
				}
			}
		
		super(c)
		}
	
	void GraphicsListView:addObject(GraphicsObject go)
		{
		super(go)
		
		GraphicsItem newItem = new GraphicsItem(go)
		
		if (objects == null)
			objects = newItem
			else
			lastObject.next = newItem
		
		newItem.prev = lastObject
		lastObject = newItem
		}
	
	void GraphicsListView:remObject(GraphicsObject go)
		{
		for (GraphicsItem bi = objects; bi != null; bi = bi.next)
			{
			if (bi.object == go)
				{
				GraphicsItem td = bi
				
				if (td.prev == null)
					objects = td.next
					else
					td.prev.next = td.next
				
				if (td.next == null)
					lastObject = td.prev
					else
					td.next.prev = td.prev
				
				break
				}
			}
		
		super(go)
		}
	
	void GraphicsListView:clearObjects()
		{
		GraphicsItem iw = objects
		while (iw != null)
			{
			GraphicsItem td = iw
			iw = iw.next
			
			td.next = null
			td.prev = null
			}
		
		objects = null
		lastObject = null
		
		super()
		}
	
	void AdaptEvents:active()
		{
		super()
		}
	
	void AdaptEvents:inactive()
		{
		super()
		}
	
	}