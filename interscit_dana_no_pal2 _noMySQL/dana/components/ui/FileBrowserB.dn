data PrevDir{
	char dir[]
	PrevDir next
	}

data FileCategory{
	char label[]
	int dirCount
	int fileCount
	WH memberSize
	
	FileCategory next
	FileCategory prev
	}

data GraphicsItem{
	GraphicsObject object
	GraphicsItem next
	GraphicsItem prev
	}

data ClickableItem{
	ClickableObject object
	ClickableItem next
	ClickableItem prev
	}

uses events.EventData

component provides FileBrowser(AdaptEvents) requires Panel, io.FileSystem fileSystem, Button, data.StringUtil stringUtil, io.Output out, Font, os.SystemInfo sysInfo, data.IntUtil iu{

	FileCategory categories
	FileCategory categoriesEnd
	
	PrevDir history
	
	Button upButton
	Button backButton
	
	Font labelFont
	
	Mutex sdLock = new Mutex()
	
	GraphicsItem objects
	GraphicsItem objectsEnd
	
	ClickableItem clickObjects
	ClickableItem lastClickObject
	
	
	FileBrowser:FileBrowser()
		{
		super()
		
		upButton = new Button("Up")
		backButton = new Button("Back")
		
		addObject(upButton)
		addObject(backButton)
		
		upButton.setPosition(0, 0)
		backButton.setPosition(50, 0)
		
		labelFont = new Font(sysInfo.getSystemFont(false), 15)
		}
	
	void AdaptEvents:active()
		{
		FileBrowser()
		
		setDirectory(currentDirectory)
		}
	
	void AdaptEvents:inactive()
		{
		super()
		}
	
	char[] subString(char array[], int start, int length)
		{
		char result[]
		
		for (int i = 0; i < length; i++)
			result = new char[](result, array[start+i])
		
		return result
		}
	
	char[] normalisePath(char path[])
		{
		int nxt = 0
		while ((nxt = stringUtil.find(path, "\\")) != StringUtil.NOT_FOUND)
			{
			path = new char[](subString(path, 0, nxt), "/", subString(path, nxt+1, path.arrayLength - (nxt+1)))
			}
		return path
		}
	
	String[] sortStrings(String strings[])
		{
		return strings
		}
	
	void FileBrowser:setDirectory(char dir[])
		{
		dir = normalisePath(clone dir)
		
		mutex(sdLock)
			{
			currentDirectory = dir
			
			categories = null
			
			FileEntry files[] = fileSystem.getDirectoryContents(currentDirectory)
			
			//alpha-sort contents
			String tFiles[] = new String[files.arrayLength]
			for (int i = 0; i < files.arrayLength; i++)
				{
				tFiles[i] = new String(files[i].name)
				}
			
			tFiles = sortStrings(tFiles)
			
			//create one category for each new first letter
			char curFL
			int curFLCount = 0
			FileCategory nextFC
			
			for (int i = 0; i < tFiles.arrayLength; i++)
				{
				if (stringUtil.uppercase(tFiles[i].string[0]) != curFL)
					{
					//if (nextFC != null && nextFC.dirCount == 0 && nextFC.fileCount == 0) categories -= nextFC;
					
					nextFC = new FileCategory()
					nextFC.label = stringUtil.uppercase(tFiles[i].string[0])
					
					if (categories == null)
						categories = nextFC
						else
						categoriesEnd.next = nextFC
					categoriesEnd = nextFC
					
					curFL = stringUtil.uppercase(tFiles[i].string[0])[0]
					}
				
				FileInfo info = fileSystem.getInfo(new char[](currentDirectory, tFiles[i].string))
				if (info.type == FileInfo.TYPE_DIR)
					nextFC.dirCount ++
					else if (info.type == FileInfo.TYPE_FILE)
					nextFC.fileCount ++
				}
			}
		
		postRepaint()
		}
	
	char[] FileBrowser:getDirectory()
		{
		return currentDirectory
		}
	
	void drawCategoryContents(Canvas c, FileCategory fc, int x, int y, int areaWidth, int areaHeight)
		{
		int sqWidth = 13
		int sqHeight = 13
		
		int xSpacing = 17
		int ySpacing = 17
		
		int cx = x + 5
		int cy = y + 20
		
		for (int i = 0; i < fc.dirCount; i++)
			{
			if (cx + sqWidth >= x + areaWidth)
				{
				cy += ySpacing
				cx = x + 5
				}
			
			c.drawRect(new Rect2D(cx, cy, sqWidth, sqHeight, new Color(157, 188, 220, 255)))
			
			cx += xSpacing
			}
		
		for (int i = 0; i < fc.fileCount; i++)
			{
			if (cx + sqWidth >= x + areaWidth)
				{
				cy += ySpacing
				cx = x + 5
				}
			
			c.drawRect(new Rect2D(cx, cy, sqWidth, sqHeight, new Color(250, 250, 250, 255)))
			
			cx += xSpacing
			}
		}
	
	void FileBrowser:paint(Canvas c)
		{
		super(c)
		
		c.pushSurface(new Rect(getPosition().x, getPosition().y, getSize().width, getSize().height), 0, 0)
		
		int myWidth = getSize().width
		
		int cx = 0
		int cy = 50
		
		for (FileCategory fw = categories; fw != null; fw = fw.next)
			{
			if (cx + 80 > myWidth)
				{
				cy = cy + 90
				cx = 0
				}
			
			c.drawRectOutline(new Rect2D(cx, cy, 80, 80, new Color(170, 170, 170, 255)))
			
			drawCategoryContents(c, fw, cx, cy, 80, 80)
			
			c.drawText(new Point2D(cx+2, cy+1, new Color(0, 0, 0, 255)), labelFont, fw.label)
			
			cx += 85
			}
		
		c.popSurface()
		}
	}