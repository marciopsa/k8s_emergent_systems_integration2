data Command {
	const int GET = 1
	const int POST = 2
	const int PUT = 3
	const int DELETE = 4
	int type
	
	char resource[]
	Header headers[]
	}

component provides Reactor requires net.TCPServerSocket, net.TCPSocket, data.StringUtil stringUtil, data.IntUtil intUtil, DocStream {
	
	TCPServerSocket serverSocket
	bool bound = false
	Mutex bindMutex = new Mutex()
	
	Command readCommand(TCPSocket socket)
		{
		Command cmd = new Command()
		
		Header headers[]
		
		char buf[]
		char last4[] = new char[4]
		
		while (last4 != "\r\n\r\n")
			{
			char b[] = socket.recv(1)
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
			}
		
		String lines[] = stringUtil.explode(buf, "\r\n")
		
		String cmd_parts[] = stringUtil.explode(lines[0].string, " ")
		
		if (stringUtil.lowercase(cmd_parts[0].string) == "get")
			cmd.type = Command.GET
			else if (stringUtil.lowercase(cmd_parts[0].string) == "post")
			cmd.type = Command.POST
		
		cmd.resource = cmd_parts[1].string
		
		for (int i = 1; i < lines.arrayLength; i++)
			{
			int ndx = stringUtil.find(lines[i].string, ":") + 1
			char key[] = stringUtil.subString(lines[i].string, 0, ndx - 1)
			char value[] = stringUtil.trim(stringUtil.subString(lines[i].string, ndx, lines[i].string.arrayLength - ndx))
			
			headers = new Header[](headers, new Header(stringUtil.lowercase(key), value))
			}
		
		cmd.headers = headers
		
		return cmd
		}
	
	char[] getHeaderValue(Command cmd, char key[])
		{
		key = stringUtil.lowercase(key)
		
		for (int i = 0; i < cmd.headers.arrayLength; i++)
			{
			if (stringUtil.lowercase(cmd.headers[i].key) == key)
				{
				return cmd.headers[i].value
				}
			}
		
		return null
		}
	
	void processStream(TCPSocket s)
		{
		//parse headers, extract command
		
		//call function associated with command, return result (as HTTP response)
		
		Command cmd = readCommand(s)
		
		if (cmd == null)
			{
			//malformed / interrupted request
			s.disconnect()
			throw new Exception("malformed or interrupted request")
			}
		
		DocStream ds = new DocStream(s, cmd.headers, true)
		
		if (cmd.type == Command.GET)
			{
			emitevent request(new WebCommand(WebCommand.GET, cmd.resource, null, ds))
			}
			else if (cmd.type == Command.POST)
			{
			//read the payload first
			char ctype[] = getHeaderValue(cmd, "content-type")
			int plen = intUtil.intFromString(getHeaderValue(cmd, "content-length"))
			byte payload[] = s.recv(plen)
			
			emitevent request(new WebCommand(WebCommand.POST, cmd.resource, payload, ds))
			}
		}
	
	void serverThread()
		{
		while (bound)
			{
			TCPSocket cs = new TCPSocket()
			
			if (cs.accept(serverSocket))
				{
				processStream(cs)
				}
			}
		}
	
	bool Reactor:bind(char address[], int port)
		{
		mutex(bindMutex)
			{
			if (bound)
				throw new Exception("Already bound")
			
			serverSocket = new TCPServerSocket()
			
			if (!serverSocket.bind(address, port))
				throw new Exception("Failed to bind master socket")
			
			bound = true
			
			asynch::serverThread()
			
			return true
			}
		}
	
	void Reactor:unbind()
		{
		serverSocket.unbind()
		bound = false
		}
	
	}