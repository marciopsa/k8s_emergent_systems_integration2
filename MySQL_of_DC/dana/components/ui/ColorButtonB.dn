const int WIDTH = 20
const int HEIGHT = 20

component provides ColorButton(AdaptEvents) requires io.Output out, data.IntUtil iu{
	
	bool visible = true
	
	void ColorButton:setPosition(int x, int y)
		{
		xPosition = x
		yPosition = y
		}
	
	void AdaptEvents:active()
		{
		postRepaint()
		}
	
	void ColorButton:paint(Canvas c)
		{
		if (visible)
			{
			c.drawRect(new Rect2D(xPosition, yPosition, size.width, size.height, color))
			c.drawRectOutline(new Rect2D(xPosition, yPosition, size.width, size.height, new Color(color.r-30, color.g-30, color.b-30, color.a)))
			}
		}
	
	void ColorButton:click(int x, int y, int button)
		{
		if (button == MouseButtons.BUTTON_LEFT)
			{
			emitevent click()
			}
		}
	
	void ColorButton:setColor(Color newColor)
		{
		color = newColor
		}
	
	Color ColorButton:getColor()
		{
		return color
		}
	
	void ColorButton:setSize(WH sz)
		{
		size = clone sz
		}
	
	WH ColorButton:getSize()
		{
		return size
		}
	
	Rect ColorButton:getBounds()
		{
		return new Rect(xPosition, yPosition, size.width, size.height)
		}
	
	WH ColorButton:getPreferredSize()
		{
		return new WH(size.width, size.height)
		}
	
	Point ColorButton:getPosition()
		{
		return new Point(xPosition, yPosition)
		}
	
	void ColorButton:postRepaint()
		{
		emitevent repaint()
		}
	}