data PrevDir{
	char dir[]
	PrevDir next
	}

data FileItem{
	FileObject object
	FileItem next
	}

uses events.EventData

component provides FileBrowser(AdaptEvents) requires Panel, FileObject, GraphicsListView, io.FileSystem fileSystem, Button, data.StringUtil stringUtil, io.Output out{
	FileItem fileObjects
	FileItem fileObjectsEnd
	FileItem fileObjectsGC
	
	PrevDir history
	
	Button upButton
	Button backButton
	
	GraphicsListView view
	
	Mutex sdLock = new Mutex()
	
	eventsink Events(EventData ed)
		{
		if (ed.type == ClickableObject.[click])
			{
			if (ed.source === upButton)
				{
				asynch::upDirectory()
				}
				else if (ed.source === backButton)
				{
				asynch::backDirectory()
				}
				else
				{
				asynch::folderClick(ed.source)
				}
			}
		}
	
	FileBrowser:FileBrowser()
		{
		super()
		
		upButton = new Button("Up")
		backButton = new Button("Back")
		
		view = new GraphicsListView()
		view.setBackground(new Color(230, 230, 230, 255))
		
		addObject(upButton)
		addObject(backButton)
		addObject(view)
		
		view.setPosition(0, 25)
		
		upButton.setPosition(0, 0)
		backButton.setPosition(50, 0)
		
		sinkevent Events(upButton)
		
		sinkevent Events(backButton)
		}
	
	void AdaptEvents:active()
		{
		FileBrowser()
		setSize(getSize().width, getSize().height)
		setDirectory(currentDirectory)
		}
	
	void AdaptEvents:inactive()
		{
		super()
		}
	
	char[] subString(char array[], int start, int length)
		{
		char result[]
		
		for (int i = 0; i < length; i++)
			result = new char[](result, array[start+i])
		
		return result
		}
	
	char[] normalisePath(char path[])
		{
		int nxt = 0
		while ((nxt = stringUtil.find(path, "\\")) != StringUtil.NOT_FOUND)
			{
			path = new char[](subString(path, 0, nxt), "/", subString(path, nxt+1, path.arrayLength - (nxt+1)))
			}
		return path
		}
	
	void FileBrowser:setDirectory(char dir[])
		{
		dir = normalisePath(clone dir)
		
		mutex(sdLock)
			{
			currentDirectory = dir
			
			//clear the GLV and add the files of this directory
			view.clearObjects()
			
			//delete the file objects one step behind each click (otherwise we may delete objects through which control is flowing)
			fileObjectsGC = fileObjects
			fileObjects = null
			
			FileEntry files[] = fileSystem.getDirectoryContents(currentDirectory)
			
			//directories first
			for (int i = 0; i < files.arrayLength; i++)
				{
				FileInfo info = fileSystem.getInfo(new char[](currentDirectory, files[i].name))
				
				if (info.type == FileInfo.TYPE_DIR)
					{
					FileItem nfi = new FileItem()
					
					nfi.object = new FileObject(new char[](currentDirectory, files[i].name, "/"))
					
					sinkevent Events(nfi.object)
					
					view.addObject(nfi.object)
					
					if (fileObjects == null)
						fileObjects = nfi
						else
						fileObjectsEnd.next = nfi
					
					fileObjectsEnd = nfi
					}
				}
			
			//and files
			for (int i = 0; i < files.arrayLength; i++)
				{
				FileInfo info = fileSystem.getInfo(new char[](currentDirectory, files[i].name))
				
				if (info.type == FileInfo.TYPE_FILE)
					{
					FileItem nfi = new FileItem()
					
					nfi.object = new FileObject(new char[](currentDirectory, files[i].name))
					view.addObject(nfi.object)
					
					if (fileObjects == null)
						fileObjects = nfi
						else
						fileObjectsEnd.next = nfi
					
					fileObjectsEnd = nfi
					}
				}
			}
		}
	
	char[] FileBrowser:getDirectory()
		{
		return currentDirectory
		}
	
	void upDirectory()
		{
		//if there is more than one "/" on the path, remove the last one
		String parts[] = stringUtil.explode(currentDirectory, "/")
		if (parts.arrayLength > 1)
			{
			String xparts[] = new String[parts.arrayLength - 1]
			xparts =[] parts
			
			char nxt[] = new char[](stringUtil.implode(xparts, "/"), "/")
			
			if (currentDirectory != "")
				{
				PrevDir npd = new PrevDir(currentDirectory)
				npd.next = history
				history = npd
				}
			
			setDirectory(nxt)
			}
		}
	
	void backDirectory()
		{
		if (history != null)
			{
			PrevDir gt = history
			history = history.next
			
			setDirectory(gt.dir)
			}
		}
	
	void folderClick(FileObject fo)
		{
		char path[] = fo.getFile()
		
		FileInfo info = fileSystem.getInfo(path)
		
		if (info.type == FileInfo.TYPE_DIR)
			{
			if (currentDirectory != "")
				{
				PrevDir npd = new PrevDir(currentDirectory)
				npd.next = history
				history = npd
				}
			
			setDirectory(path)
			}
		}
	
	void FileBrowser:setSize(int newWidth, int newHeight)
		{
		super(newWidth, newHeight)
		
		view.setSize(newWidth, newHeight - 25)
		}
	
	}