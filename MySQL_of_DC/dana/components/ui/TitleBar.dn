const int HEIGHT = 20
const int EDGE_DISTANCE = 1

uses events.EventData

component provides TitleBar(AdaptEvents) requires Panel, Label, io.Output out, data.IntUtil iu, os.SystemInfo sysInfo, ColorButton{
	
	bool drag
	int lastX
	int lastY
	
	int dragX
	int dragY
	
	ColorButton closeButton
	ColorButton minButton
	ColorButton maxButton
	Label titleLabel
	
	Canvas canvas
	
	eventsink Buttons(EventData ed)
		{
		if (ed.type == ColorButton.[click] && ed.source === closeButton)
			postClose()
		}
	
	TitleBar:TitleBar(char newTitle[])
		{
		super()
		
		title = newTitle
		
		titleLabel = new Label(newTitle, sysInfo.getSystemFont(false), 15)
		titleLabel.setColor(new Color(255, 255, 255, 255))
		
		titleLabel.setPosition(5, 1)
		
		addObject(titleLabel)
		
		closeButton = new ColorButton()
		closeButton.setSize(new WH(20, 18))
		closeButton.setColor(new Color(204, 96, 96, 255))
		
		addObject(closeButton)
		
		sinkevent Buttons(closeButton)
		
		minButton = new ColorButton()
		minButton.setSize(new WH(14, 14))
		minButton.setColor(new Color(81, 172, 215, 255))
		
		addObject(minButton)
		
		maxButton = new ColorButton()
		maxButton.setSize(new WH(16, 16))
		maxButton.setColor(new Color(103, 169, 244, 255))
		
		addObject(maxButton)
		
		setBackground(new Color(100, 124, 150, 255))
		}
	
	void AdaptEvents:active()
		{
		TitleBar(title)
		setWindowRect(windowRect)
		postRepaint()
		}
	
	void AdaptEvents:inactive()
		{
		super()
		}
	
	void postClose()
		{
		emitevent close()
		}
	
	Rect TitleBar:getRect()
		{
		return new Rect(EDGE_DISTANCE, EDGE_DISTANCE, windowRect.width - EDGE_DISTANCE, HEIGHT)
		}
	
	void TitleBar:setTitle(char t[])
		{
		title = t
		}
	
	void TitleBar:setWindowRect(Rect w)
		{
		if (windowRect == null)
			{
			lastX = w.x
			lastY = w.y
			}
		
		windowRect = w
		
		setSize(w.width - (EDGE_DISTANCE * 2), HEIGHT)
		
		closeButton.setPosition(w.width - EDGE_DISTANCE - 20, EDGE_DISTANCE)
		maxButton.setPosition(w.width - EDGE_DISTANCE - 40, EDGE_DISTANCE+2)
		minButton.setPosition(w.width - EDGE_DISTANCE - 58, EDGE_DISTANCE+3)
		}
	
	void TitleBar:mouseDown(int x, int y, int button)
		{
		if (button == MouseButtons.BUTTON_LEFT)
			{
			int w = windowRect.width
			
			int rx = windowRect.x
			int ry = windowRect.y
			
			rx = x - rx
			ry = y - ry
			
			if (rx >= EDGE_DISTANCE && rx <= w - EDGE_DISTANCE && ry >= EDGE_DISTANCE && ry <= EDGE_DISTANCE + HEIGHT)
				{
				drag = true
				
				dragX = x
				dragY = y
				}
			}
		}
	
	void TitleBar:mouseUp(int x, int y, int button)
		{
		if (button == MouseButtons.BUTTON_LEFT)
			{
			drag = false
			}
		}
	
	void TitleBar:mouseMove(int x, int y)
		{
		if (drag)
			{
			int newX = 0
			int newY = 0
			
			if (x > dragX)
				newX = lastX + (x - dragX)
				else
				newX = lastX - (dragX - x)
			
			if (y > dragY)
				newY = lastY + (y - dragY)
				else
				newY = lastY - (dragY - y)
			
			emitevent move(new TitleEvent(newX, newY))
			
			lastX = newX
			lastY = newY
			
			dragX = x
			dragY = y
			}
		}
	
	char[] TitleBar:getTitle()
		{
		return title
		}
	
	}